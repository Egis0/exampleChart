{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colors","colorsBg","articleStyle","padding","headingStyle","marginBottom","marginTop","fontWeight","fontStyle","App","state","corrections","_this2","this","axios","get","then","response","setState","data","label","filter","correction","title","map","value","_this3","labels","Object","toConsumableArray","Set","moment","date","format","datasets","index","getValues","borderColor","backgroundColor","react_default","a","createElement","className","style","es","options","scales","xAxes","stacked","yAxes","legend","position","boxHeight","boxWidth","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPAMMA,EAAS,CAAC,qBAAsB,qBAAsB,sBACtDC,EAAW,CAAC,0BAA2B,0BAA2B,2BAElEC,EAAe,CACnBC,QAAS,WAGLC,EAAe,CACnBC,aAAc,GACdC,UAAW,GACXC,WAAY,IACZC,UAAW,UAgEEC,6MA5DbC,MAAQ,CAAEC,YAAa,uFAEH,IAAAC,EAAAC,KAClBC,IAAMC,IAAI,qCACLC,KAAK,SAAAC,GAAQ,OAAIL,EAAKM,SAAS,CAAEP,YAAaM,EAASE,2CAGpDC,GACR,OAAOP,KAAKH,MAAMC,YACbU,OAAO,SAAAC,GAAU,OAAIA,EAAWC,QAAUH,IAC1CI,IAAI,SAAAF,GAAU,OAAIA,EAAWG,yCAG3B,IAAAC,EAAAb,KA+BDM,EAAO,CACXQ,OA/BUC,OAAAC,EAAA,EAAAD,CAAO,IAAIE,IAAIjB,KAAKH,MAAMC,YAAYa,IAAI,SAAAF,GAAU,OAAIS,IAAOT,EAAWU,MAAMC,OAAO,wBAgCjGC,SA/BiBN,OAAAC,EAAA,EAAAD,CAAO,IAAIE,IAAIjB,KAAKH,MAAMC,YAAYa,IAAI,SAAAF,GAAU,OAAIA,EAAWC,UAEvDC,IAAI,SAACJ,EAAOe,GACzC,MAAO,CACLf,QACAD,KAAMO,EAAKU,UAAUhB,GACrBiB,YAAarC,EAAOmC,GACpBG,gBAAiBrC,EAASkC,OA2B9B,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAOvC,GAAX,yBACAmC,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBAAmBC,MAAOzC,GAC3CqC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMzB,KAAMA,EAAM0B,QA3BR,CACdC,OAAQ,CACNC,MAAO,CAAC,CACNC,SAAS,IAEXC,MAAO,CAAC,CACND,SAAS,KAGbE,OAAQ,CACNC,SAAU,SACVxB,OAAQ,CACNyB,UAAW,GACXC,SAAU,iBAxCFC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.86908db9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport moment from 'moment'\nimport { Line } from 'react-chartjs-2';\n\nconst colors = ['rgb(155, 202, 200)', 'rgb(176, 195, 222)', 'rgb(123, 248, 222)'];\nconst colorsBg = ['rgba(175, 222, 220, .5)', 'rgba(196, 215, 242, .5)', 'rgba(145, 168, 164, .5)'];\n\nconst articleStyle = {\n  padding: '0 120px'\n};\n\nconst headingStyle = {\n  marginBottom: 10,\n  marginTop: 35,\n  fontWeight: 600,\n  fontStyle: 'italic'\n};\n\nclass App extends Component {\n  state = { corrections: [] };\n\n  componentDidMount() {\n    axios.get('http://localhost:8080/corrections')\n        .then(response => this.setState({ corrections: response.data }));\n  }\n\n  getValues(label) {\n    return this.state.corrections\n        .filter(correction => correction.title === label)\n        .map(correction => correction.value);\n  }\n\n  render() {\n    const labels = [...new Set(this.state.corrections.map(correction => moment(correction.date).format('ddd, DD MMM YYYY')))];\n    const datasetLabels = [...new Set(this.state.corrections.map(correction => correction.title))];\n\n    const datasets = datasetLabels.map((label, index) => {\n      return {\n        label,\n        data: this.getValues(label),\n        borderColor: colors[index],\n        backgroundColor: colorsBg[index]\n      };\n    });\n\n    const options = {\n      scales: {\n        xAxes: [{\n          stacked: true\n        }],\n        yAxes: [{\n          stacked: true\n        }]\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          boxHeight: 15,\n          boxWidth: 15\n        }\n      }\n    };\n\n    const data = {\n      labels,\n      datasets\n    };\n\n    return (\n      <div className=\"App\">\n        <h4 style={headingStyle}>Correction statistics</h4>\n        <article className=\"canvas-container\" style={articleStyle}>\n          <Line data={data} options={options}/>\n        </article>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}